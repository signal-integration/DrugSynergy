visible = TRUE,
label = 'Total Weight', values = ~totalWeight),
list(range = c(~min(assemblyPW),~max(assemblyPW)),
label = 'Assembly Penalty Weight', values = ~assemblyPW),
list(range = c(~min(HstW),~max(HstW)),
label = 'Height st Width', values = ~HstW),
list(range = c(~min(minHW),~max(minHW)),
label = 'Min Height Width', values = ~minHW),
list(range = c(~min(minWD),~max(minWD)),
label = 'Min Width Diameter', values = ~minWD),
list(range = c(~min(rfBlock),~max(rfBlock)),
label = 'RF Block', values = ~rfBlock)
)
)
p
q()
q()
1-(5/6)^6
(0.997*10^-4)/(0.997*10^-4 + 0.14*(1-10^-4))
q()
2/3
3/5
2/5
5/6
q()
setwd("~/Desktop/curie/X-Y-project/codes")
source("setPowerPointStyle.R")
setPowerPointStyle()
library(e1071)
library(caret)
library(randomForest)
library(gplots)
load("rf_model")
load("test_20_pc")
load("test_40_pc")
load("test_100_pc")
load("test_200_pc")
tests=list(test_20_pc,test_40_pc,test_100_pc,test_200_pc)
my_palette <- colorRampPalette(c("white", "black"))(n = 100)
RF_accuracy=list()
p=lapply(tests,function(x) predict(rf_model,newdata=x[,-1]))
conf=confusionMatrix(p[[1]],tests[[1]][,1])
cols = c("black","red","blue")
RF_accuracy[[1]]=diag(conf$table)
plot(diag(conf$table),ylim = c(0,100),type = "l",
xlab = "profile index",ylab = "% accuracy")
for (j in 2:3) {
conf = confusionMatrix(p[[j]],tests[[j]][,1])
#lines(diag(conf$table),ylim = c(0,100),col = cols[j])
RF_accuracy[[j]]=diag(conf$table)
heatmap.2(conf$table,dendrogram='none', Rowv=FALSE, Colv=FALSE,trace='none',
col = my_palette)
}
cols = c("black","red","blue")
RF_accuracy[[1]]=diag(conf$table)
plot(diag(conf$table),ylim = c(0,100),type = "l",
xlab = "profile index",ylab = "% accuracy")
for (j in 2:3) {
conf = confusionMatrix(p[[j]],tests[[j]][,1])
#lines(diag(conf$table),ylim = c(0,100),col = cols[j])
RF_accuracy[[j]]=diag(conf$table)
heatmap.2(conf$table,dendrogram='none', Rowv=FALSE, Colv=FALSE,trace='none',
col = my_palette)
}
cols = c("black","red","blue")
RF_accuracy[[1]]=diag(conf$table)
plot(diag(conf$table),ylim = c(0,100),type = "l",
xlab = "profile index",ylab = "% accuracy")
for (j in 2:3) {
conf = confusionMatrix(p[[j]],tests[[j]][,1])
#lines(diag(conf$table),ylim = c(0,100),col = cols[j])
RF_accuracy[[j]]=diag(conf$table)
heatmap.2(conf$table,dendrogram='none', Rowv=FALSE, Colv=FALSE,trace='none',
col = my_palette)
}
plot(diag(conf$table),ylim = c(0,100),type = "l",
xlab = "profile index",ylab = "% accuracy")
for (j in 2:3) {
conf = confusionMatrix(p[[j]],tests[[j]][,1])
#lines(diag(conf$table),ylim = c(0,100),col = cols[j])
RF_accuracy[[j]]=diag(conf$table)
heatmap.2(conf$table,dendrogram='none', Rowv=FALSE, Colv=FALSE,trace='none',
col = my_palette)
}
legend(2,35, # places a legend at the appropriate place
c("20%","40%","100%"), # puts text in the legend
lty = c(1,1,1), # gives the legend appropriate symbols (lines)
lwd = c(2.5,2.5,2.5),col = cols,
bty = "n")
cols = c("black","red","blue")
RF_accuracy[[1]]=diag(conf$table)
plot(diag(conf$table),ylim = c(0,100),type = "l",
xlab = "profile index",ylab = "% accuracy")
for (j in 2:3) {
conf = confusionMatrix(p[[j]],tests[[j]][,1])
#lines(diag(conf$table),ylim = c(0,100),col = cols[j])
RF_accuracy[[j]]=diag(conf$table)
col = my_palette)
plot(diag(conf$table),ylim = c(0,100),type = "l",
xlab = "profile index",ylab = "% accuracy")
for (j in 2:3) {
conf = confusionMatrix(p[[j]],tests[[j]][,1])
lines(diag(conf$table),ylim = c(0,100),col = cols[j])
#RF_accuracy[[j]]=diag(conf$table)
#heatmap.2(conf$table,dendrogram='none', Rowv=FALSE, #Colv=FALSE,trace='none',
#col = my_palette)
}
legend(2,35, # places a legend at the appropriate place
c("20%","40%","100%"), # puts text in the legend
lty = c(1,1,1), # gives the legend appropriate symbols (lines)
lwd = c(2.5,2.5,2.5),col = cols,
bty = "n")
#plotting
cols = c("black","red","blue")
RF_accuracy[[1]]=diag(conf$table)
plot(diag(conf$table),ylim = c(0,100),type = "l",
xlab = "profile index",ylab = "% accuracy")
for (j in 2:3) {
conf = confusionMatrix(p[[j]],tests[[j]][,1])
lines(diag(conf$table),ylim = c(0,100),col = cols[j])
#RF_accuracy[[j]]=diag(conf$table)
#heatmap.2(conf$table,dendrogram='none', Rowv=FALSE, #Colv=FALSE,trace='none',
#col = my_palette)
}
graphics.off()
#plotting
cols = c("black","red","blue")
RF_accuracy[[1]]=diag(conf$table)
plot(diag(conf$table),ylim = c(0,100),type = "l",
xlab = "profile index",ylab = "% accuracy")
for (j in 2:3) {
conf = confusionMatrix(p[[j]],tests[[j]][,1])
lines(diag(conf$table),ylim = c(0,100),col = cols[j])
#RF_accuracy[[j]]=diag(conf$table)
#heatmap.2(conf$table,dendrogram='none', Rowv=FALSE, #Colv=FALSE,trace='none',
#col = my_palette)
}
plot(diag(conf$table),ylim = c(0,100),type = "l",
xlab = "profile index",ylab = "% accuracy")
diag(conf$table)
plot(diag(conf$table),ylim = c(0,100),type = "l",
xlab = "profile index",ylab = "% accuracy")
graphics.off()
plot(diag(conf$table),ylim = c(0,100),type = "l",
xlab = "profile index",ylab = "% accuracy")
dev.new()
plot(diag(conf$table),ylim = c(0,100),type = "l",
xlab = "profile index",ylab = "% accuracy")
for (j in 2:3) {
conf = confusionMatrix(p[[j]],tests[[j]][,1])
lines(diag(conf$table),ylim = c(0,100),col = cols[j])
}
for (j in 2:3) {
conf = confusionMatrix(p[[j]],tests[[j]][,1])
lines(diag(conf$table),ylim = c(0,100),col = cols[j])
#RF_accuracy[[j]]=diag(conf$table)
#heatmap.2(conf$table,dendrogram='none', Rowv=FALSE, #Colv=FALSE,trace='none',
#col = my_palette)
}
plot(diag(conf$table),ylim = c(0,100),type = "l",
xlab = "profile index",ylab = "% accuracy")
for (j in 2:3) {
conf = confusionMatrix(p[[j]],tests[[j]][,1])
lines(diag(conf$table),ylim = c(0,100),col = cols[j])
#RF_accuracy[[j]]=diag(conf$table)
#heatmap.2(conf$table,dendrogram='none', Rowv=FALSE, #Colv=FALSE,trace='none',
#col = my_palette)
}
plot.new()
plot(diag(conf$table),ylim = c(0,100),type = "l",
xlab = "profile index",ylab = "% accuracy")
for (j in 2:3) {
conf = confusionMatrix(p[[j]],tests[[j]][,1])
lines(diag(conf$table),ylim = c(0,100),col = cols[j])
#RF_accuracy[[j]]=diag(conf$table)
#heatmap.2(conf$table,dendrogram='none', Rowv=FALSE, #Colv=FALSE,trace='none',
#col = my_palette)
}
dev.new()
plot(diag(conf$table),ylim = c(0,100),type = "l",
xlab = "profile index",ylab = "% accuracy")
for (j in 2:3) {
conf = confusionMatrix(p[[j]],tests[[j]][,1])
lines(diag(conf$table),ylim = c(0,100),col = cols[j])
#RF_accuracy[[j]]=diag(conf$table)
#heatmap.2(conf$table,dendrogram='none', Rowv=FALSE, #Colv=FALSE,trace='none',
#col = my_palette)
}
dev.new()
plot(diag(conf$table),ylim = c(0,100),type = "l",
xlab = "profile index",ylab = "% accuracy")
source("setPowerPointStyle.R")
setPowerPointStyle()
library(e1071)
library(caret)
library(randomForest)
library(gplots)
load("rf_model")
load("test_20_pc")
load("test_40_pc")
load("test_100_pc")
load("test_200_pc")
tests=list(test_20_pc,test_40_pc,test_100_pc,test_200_pc)
p=lapply(tests,function(x) predict(rf_model,newdata=x[,-1]))
conf=confusionMatrix(p[[1]],tests[[1]][,1])
cols = c("black","red","blue")
plot(diag(conf$table),ylim = c(0,100),type = "l",
xlab = "profile index",ylab = "% accuracy")
for (j in 2:3) {
conf = confusionMatrix(p[[j]],tests[[j]][,1])
lines(diag(conf$table),ylim = c(0,100),col = cols[j])
}
p
predicted_profiles = lapply(tests,function(x) predict(rf_model,newdata=x[,-1]))
predicted_profiles
[[1]]
predicted_profiles[[1]]
predicted_profiles[[2]]
length(predicted_profiles)
predicted_profiles = predict(rf_model, newdata = tests[[k]][,-1])
k = 1
predicted_profiles = predict(rf_model, newdata = tests[[k]][,-1])
predicted_profiles
length(predicted_profiles)
confusion_matrix = confusionMatrix(predicted_profiles, true_profiles)
true_profiles = tests[[k]][,1]
confusion_matrix = confusionMatrix(predicted_profiles, true_profiles)
plot(diag(confusion_matrixf$table),ylim = c(0,100),type = "l",
xlab = "profile index",ylab = "% accuracy")
plot(diag(confusion_matrix$table),ylim = c(0,100),type = "l",
xlab = "profile index",ylab = "% accuracy")
for (k in 1:3) {
predicted_profiles = predict(rf_model, newdata = tests[[k]][,-1])
true_profiles = tests[[k]][,1]
confusion_matrix = confusionMatrix(predicted_profiles, true_profiles)
if (k == 1){
plot(diag(confusion_matrix$table),ylim = c(0,100),
type = "l", xlab = "profile index",ylab = "% accuracy")}
else{
lines(diag(conf$table),ylim = c(0,100),col = cols[j])
}
}
for (k in 1:3) {
predicted_profiles = predict(rf_model, newdata = tests[[k]][,-1])
true_profiles = tests[[k]][,1]
confusion_matrix = confusionMatrix(predicted_profiles, true_profiles)
if (k == 1){
plot(diag(confusion_matrix$table),ylim = c(0,100),
type = "l", xlab = "profile index", ylab = "% accuracy")}
else{
lines(diag(confusion_matrix$table), ylim = c(0,100),col = cols[j])
}
}
for (k in c(3, 2, 1)) {
predicted_profiles = predict(rf_model, newdata = tests[[k]][,-1])
true_profiles = tests[[k]][,1]
confusion_matrix = confusionMatrix(predicted_profiles, true_profiles)
if (k == 1){
plot(diag(confusion_matrix$table),ylim = c(0,100),
type = "l", xlab = "profile index", ylab = "% accuracy")}
else{
lines(diag(confusion_matrix$table), ylim = c(0,100),col = cols[k])
}
}
for (k in c(3, 2, 1)) {
predicted_profiles = predict(rf_model, newdata = tests[[k]][,-1])
true_profiles = tests[[k]][,1]
confusion_matrix = confusionMatrix(predicted_profiles, true_profiles)
if (k == 3){
plot(diag(confusion_matrix$table),ylim = c(0,100),
type = "l", xlab = "profile index", ylab = "% accuracy", col = cols[k])
}
else{
lines(diag(confusion_matrix$table), ylim = c(0,100), col = cols[k])
}
}
load("lda_model")
for (k in c(3, 2, 1)) {
predicted_profiles = predict(rf_model, newdata = tests[[k]][,-1])
true_profiles = tests[[k]][,1]
confusion_matrix = confusionMatrix(predicted_profiles, true_profiles)
if (k == 3){
plot(diag(confusion_matrix$table),ylim = c(0,100),
type = "l", xlab = "profile index", ylab = "% accuracy", col = cols[k])
}
else{
lines(diag(confusion_matrix$table), ylim = c(0,100), col = cols[k])
}
print(mean(diag(confusion_matrix$table)))
}
length(true_profiles)
load("lda_model")
for (k in c(3, 2, 1)) {
predicted_profiles = predict(lda_model, newdata = tests[[k]][,-1])
true_profiles = tests[[k]][,1]
confusion_matrix = confusionMatrix(predicted_profiles, true_profiles)
if (k == 3){
plot(diag(confusion_matrix$table),ylim = c(0,100),
type = "l", xlab = "profile index", ylab = "% accuracy", col = cols[k])
}
else{
lines(diag(confusion_matrix$table), ylim = c(0,100), col = cols[k])
}
print(mean(diag(confusion_matrix$table)))
}
predicted_profiles = predict(lda_model, newdata = tests[[k]][,-1])
lda_model
predicted_profiles = predict(lda_model, newdata = tests[[k]][,-1])
tests[[k]][,-1]
predict(lda_model, tests[[k]][,-1])
predict(lda_model, tests[[k]])
predict(lda_model, tests[[k]][,-1])
p = lapply(tests,function(x)
predict(lda_model,newdata = x[,-1]))
library(caret)
lda_model
lda_model$method
lda_model$modelInfo
library(MASS)
predicted_profiles = predict(lda_model, newdata = tests[[k]][,-1])
predicted_profiles = predict(lda_model, newdata = as.data.frame(tests[[k]][,-1]))
tests[[1]]
class(tests[[1]][,-1])
dim(tests[[1]][,-1])
load("knn_model")
predicted_profiles = predict(knn_model, newdata = tests[[k]][,-1])
true_profiles = tests[[k]][,1]
confusion_matrix = confusionMatrix(predicted_profiles, true_profiles)
print(mean(diag(confusion_matrix$table)))
predicted_profiles = predict(knn_model, newdata = tests[[2]][,-1])
true_profiles = tests[[k]][,1]
confusion_matrix = confusionMatrix(predicted_profiles, true_profiles)
print(mean(diag(confusion_matrix$table)))
predicted_profiles = predict(knn_model, newdata = tests[[1]][,-1])
true_profiles = tests[[k]][,1]
confusion_matrix = confusionMatrix(predicted_profiles, true_profiles)
print(mean(diag(confusion_matrix$table)))
predict(lda_model, tests[[1]][1,-1])
library(caret)
predict(lda_model, tests[[1]][1,])
predict(lda_model, tests[[1]])
test_100_pc
predict(lda_model, test_100_pc)
predict(lda_model, test_100_pc[,-1])
predict(lda_model, t(test_100_pc[1,-1]))
t(test_100_pc[1,-1])
data.frame(t(test_100_pc[1,-1]))
setwd("~/Desktop/curie/documentation")
source("plot_model_accuracy.R")
plot_model_accuracy(tests, lda_model)
tests
plot_model_accuracy(tests, lda_model, duplicated = 1)
predict(lda_model, t(test_100_pc[1,-c(1,13,21,22)]))
predict(lda_model, test_100_pc[1,-c(1,13,21,22)])
lda_model$modelInfo
lda_model$modelType
lda_model$pred
lda_model$call
lda_model$bestTune
lda_model$metric
lda_model$finalModel
lda_model$trainingData
head(lda_model$trainingData)
dim(lda_model$trainingData)
predict(lda_model, lda_model$trainingData[1,])
predict(lda_model, newdata = lda_model$trainingData[1,])
predict(lda_model, newdata = data.frame(lda_model$trainingData[1,]))
predict(lda_model, newdata = data.frame(lda_model$trainingData[1,-1]))
p = lapply(tests,function(x)
predict(lda_model,newdata = x[,-1]))
lda_model$trainingData[1,]
a = lda_model$trainingData[1,]
a
a = lda_model$trainingData[1,1:75]
a
predict(lda_model, newdata = a)
a
length(a)
class(a)
predict(lda_model, newdata = t(a))
a = lda_model$trainingData[1,1:76, -1]
a
predict(lda_model, newdata = a)
a
a = t(lda_model$trainingData[1,1:76, -1])
a
predict(lda_model, newdata = a)
a
a = t(lda_model$trainingData[1,1:75, -1])
predict(lda_model, newdata = a)
a
a = lda_model$trainingData[1,1:75, -1]
predict(lda_model, newdata = a)
a
predict(lda_model, newdata = t(a))
predict(lda_model, newdata = data.frame(t(a)))
predict(lda_model, newdata = lda_model$trainingData[1,])
predict(lda_model, newdata = factor(lda_model$trainingData[1,]))
trainingData[1,]
lda_model$trainingData[1,]
class(lda_model$trainingData[1,])
predict(lda_model, newdata = lda_model$trainingData[1,1:75])
lda_model$preProcess
lda_model$call
predict.train(lda_model, test_100_pc[,-1])
test_100_pc[,-1]
test_100_pc[1,-1]
t(test_100_pc[1,-1])
predict(lda_model, t(test_100_pc[1,-1]))
predict(lda_model, t(test_100_pc[1,-1,-1]))
predict(lda_model, newdata = t(test_100_pc[1,-1,-1]))
predict(lda_model, newdata = test_100_pc[1,-1,-1])
rm(list = ls())
source("compute_minimum_delta_analysis.R")
compute_minimum_delta_analysis(c(1,1,1,2), 1)
compute_minimum_delta_analysis(c(1,1,1,2), 1.1)
compute_minimum_delta_analysis(c(1,1,1,2), 0.9)
source("compute_minimum_delta_analysis.R")
compute_minimum_delta_analysis(c(1,1,1,2), 0.9)
compute_minimum_delta_analysis(c(1,1,1,2), 1)
compute_minimum_delta_analysis(c(1,1,1,2), 0.9)
compute_minimum_delta_analysis(c(1,1,2,2), 0.9)
compute_minimum_delta_analysis(c(1,1,1,0.9), 0.9)
setwd("~/Desktop/DrugSynergy/codes")
setwd("~/Desktop/DrugSynergy/codes")
source("compute_profile_means.R")
source("compute_minimum_delta.R")
source("setPowerPointStyle.R")
setPowerPointStyle()
PROFCODES = read.table("profile_codes_v2.txt",header = TRUE,sep = "\t") #contains the definitions of all profiles
load("constraints_vector")
prof_index = 3 #index of profile to be simulated (corresponds to an emergent synergy)
ntimes = 5 #n. of simulations
exp_min = 2 #min range of expression value
exp_max = 16 #max range of expression value
min_delta = 1 #minimum non-zero difference among any two comparisons
profile_means = compute_profile_means(PROFCODES, prof_index, ntimes, exp_min,
exp_max, constraints_vector, min_delta)[ , 1:4]
head(profile_means)
source("setPowerPointStyle.R")
setPowerPointStyle()
colnames(profile_means)=c("0","X","Y","X+Y")
barplot(profile_means[1,], ylab = 'simulated expression')
add = profile_means[1,1] + (profile_means[1,2] - profile_means[1,1]) + (profile_means[1,3] - profile_means[1,1])
abline(h = add, col="red")
source("simulate_from_means.R")
source("setPowerPointStyle.R")
setPowerPointStyle()
samples = 4 #number of samples for each condition that will be simulated
noise_level = 0.5 #this means that the signal-to-noise is delta/noise_level = 1/0.5
design = factor(c(rep("0", samples), rep("X", samples), rep("Y", samples), rep("Y+X", samples)))
simulated_values = simulate_from_means(profile_means[1,], prof_index, samples, noise_level, exp_min, exp_max)
names(simulated_values) = design
boxplot(simulated_values ~ design, ylab = 'simulated expression', col = 'gray')
stripchart(simulated_values ~ design, vertical = TRUE,
method = "jitter", add = TRUE, pch = 20, col = 'black',cex=1.5)
source("setPowerPointStyle.R")
setPowerPointStyle()
noise_level = 1 #this means that the signal-to-noise is delta/noise_level = 1/1
simulated_values = simulate_from_means(profile_means[1,], prof_index, samples, noise_level, exp_min, exp_max)
boxplot(simulated_values ~ design, ylab = 'simulated expression', col = 'gray')
stripchart(simulated_values ~ design, vertical = TRUE,
method = "jitter", add = TRUE, pch = 20, col = 'black',cex=1.5)
source("extract_stat_features.R")
profile_features = extract_stat_features(simulated_values)
length(profile_features)
head(profile_features, 10)
source("generate_training_set.R")
samples = 4 #n. of samples per condition
ntimes = 10 #n. of simulations for each profile (should be >1000 for a good training set)
big_simulation = generate_training_set(samples, ntimes)
#the resulting dataframe has samples*ntimes*5 rows and 76 columns
dim(big_simulation)
source("generate_training_set.R")
data_file = "TNF_IFN_2.csv"
my_data = read.csv(data_file,sep = '\t')
head(my_data)
#get numeric data
expression_data = my_data[,-(1:2)]
if (max(expression_data)>25) expression_data = log2(expression_data)
#removing uninformative probes (very small coefficient of variation)
cof_cutoff = 0.05
cof = apply(expression_data, 1, function(x) sd(x)/mean(x))
cof_filter = which(cof > cof_cutoff)
source("setPowerPointStyle.R")
setPowerPointStyle()
my.pca <- prcomp(t(expression_data[cof_filter, ]), center = TRUE, scale=TRUE)
#we assume the same number of samples for each condition
samples = ncol(expression_data)/4
cols = c(rep("black", samples), rep("red", samples),
rep("blue", samples), rep("yellow", samples))
plot(my.pca$x[, 1], my.pca$x[, 2], col = cols,
xlab = "PC1", ylab = "PC2", pch = 20, cex = 1.5, main = data_file)
legend("bottomleft", pch = 20, col = unique(cols),
legend = c("0","X","Y","X+Y"), bty = 'n',cex = 1)
source("filter_data_on_deltas.R")
design = factor(c(rep("0",samples),rep("X",samples),
rep("Y",samples),rep("Y+X",samples)))
my_data_filtered = filter_data_on_deltas(my_data, design = design)
head(my_data_filtered)
source("find_optimal_match.R")
source("find_optimal_match.R")
my_data_filtered_matched = find_optimal_match(my_data_filtered)
source("find_optimal_match.R")
my_data_filtered_matched = find_optimal_match(my_data_filtered)
source("fancy.frequency.plots3.R")
fancy.freq.plots3(1, c(1,2,2))
fancy.freq.plots3(1, c(1,2,2))
source("fancy.frequency.plots3.R")
fancy.freq.plots3(1, c(1,2,2))
fancy.freq.plots3(1, c(1,2,10))
q()
